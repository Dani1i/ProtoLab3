// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformarLunaClient is the client API for InformarLuna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformarLunaClient interface {
	InformarLuna(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Direccion, error)
}

type informarLunaClient struct {
	cc grpc.ClientConnInterface
}

func NewInformarLunaClient(cc grpc.ClientConnInterface) InformarLunaClient {
	return &informarLunaClient{cc}
}

func (c *informarLunaClient) InformarLuna(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Direccion, error) {
	out := new(Direccion)
	err := c.cc.Invoke(ctx, "/main.InformarLuna/InformarLuna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformarLunaServer is the server API for InformarLuna service.
// All implementations must embed UnimplementedInformarLunaServer
// for forward compatibility
type InformarLunaServer interface {
	InformarLuna(context.Context, *Comando) (*Direccion, error)
	mustEmbedUnimplementedInformarLunaServer()
}

// UnimplementedInformarLunaServer must be embedded to have forward compatible implementations.
type UnimplementedInformarLunaServer struct {
}

func (UnimplementedInformarLunaServer) InformarLuna(context.Context, *Comando) (*Direccion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarLuna not implemented")
}
func (UnimplementedInformarLunaServer) mustEmbedUnimplementedInformarLunaServer() {}

// UnsafeInformarLunaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformarLunaServer will
// result in compilation errors.
type UnsafeInformarLunaServer interface {
	mustEmbedUnimplementedInformarLunaServer()
}

func RegisterInformarLunaServer(s grpc.ServiceRegistrar, srv InformarLunaServer) {
	s.RegisterService(&InformarLuna_ServiceDesc, srv)
}

func _InformarLuna_InformarLuna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comando)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformarLunaServer).InformarLuna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.InformarLuna/InformarLuna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformarLunaServer).InformarLuna(ctx, req.(*Comando))
	}
	return interceptor(ctx, in, info, handler)
}

// InformarLuna_ServiceDesc is the grpc.ServiceDesc for InformarLuna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformarLuna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.InformarLuna",
	HandlerType: (*InformarLunaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformarLuna",
			Handler:    _InformarLuna_InformarLuna_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// InformarS1Client is the client API for InformarS1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformarS1Client interface {
	InformarS1(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error)
}

type informarS1Client struct {
	cc grpc.ClientConnInterface
}

func NewInformarS1Client(cc grpc.ClientConnInterface) InformarS1Client {
	return &informarS1Client{cc}
}

func (c *informarS1Client) InformarS1(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/main.InformarS1/InformarS1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformarS1Server is the server API for InformarS1 service.
// All implementations must embed UnimplementedInformarS1Server
// for forward compatibility
type InformarS1Server interface {
	InformarS1(context.Context, *Comando) (*Reloj, error)
	mustEmbedUnimplementedInformarS1Server()
}

// UnimplementedInformarS1Server must be embedded to have forward compatible implementations.
type UnimplementedInformarS1Server struct {
}

func (UnimplementedInformarS1Server) InformarS1(context.Context, *Comando) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarS1 not implemented")
}
func (UnimplementedInformarS1Server) mustEmbedUnimplementedInformarS1Server() {}

// UnsafeInformarS1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformarS1Server will
// result in compilation errors.
type UnsafeInformarS1Server interface {
	mustEmbedUnimplementedInformarS1Server()
}

func RegisterInformarS1Server(s grpc.ServiceRegistrar, srv InformarS1Server) {
	s.RegisterService(&InformarS1_ServiceDesc, srv)
}

func _InformarS1_InformarS1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comando)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformarS1Server).InformarS1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.InformarS1/InformarS1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformarS1Server).InformarS1(ctx, req.(*Comando))
	}
	return interceptor(ctx, in, info, handler)
}

// InformarS1_ServiceDesc is the grpc.ServiceDesc for InformarS1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformarS1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.InformarS1",
	HandlerType: (*InformarS1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformarS1",
			Handler:    _InformarS1_InformarS1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// InformarS2Client is the client API for InformarS2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformarS2Client interface {
	InformarS2(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error)
}

type informarS2Client struct {
	cc grpc.ClientConnInterface
}

func NewInformarS2Client(cc grpc.ClientConnInterface) InformarS2Client {
	return &informarS2Client{cc}
}

func (c *informarS2Client) InformarS2(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/main.InformarS2/InformarS2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformarS2Server is the server API for InformarS2 service.
// All implementations must embed UnimplementedInformarS2Server
// for forward compatibility
type InformarS2Server interface {
	InformarS2(context.Context, *Comando) (*Reloj, error)
	mustEmbedUnimplementedInformarS2Server()
}

// UnimplementedInformarS2Server must be embedded to have forward compatible implementations.
type UnimplementedInformarS2Server struct {
}

func (UnimplementedInformarS2Server) InformarS2(context.Context, *Comando) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarS2 not implemented")
}
func (UnimplementedInformarS2Server) mustEmbedUnimplementedInformarS2Server() {}

// UnsafeInformarS2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformarS2Server will
// result in compilation errors.
type UnsafeInformarS2Server interface {
	mustEmbedUnimplementedInformarS2Server()
}

func RegisterInformarS2Server(s grpc.ServiceRegistrar, srv InformarS2Server) {
	s.RegisterService(&InformarS2_ServiceDesc, srv)
}

func _InformarS2_InformarS2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comando)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformarS2Server).InformarS2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.InformarS2/InformarS2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformarS2Server).InformarS2(ctx, req.(*Comando))
	}
	return interceptor(ctx, in, info, handler)
}

// InformarS2_ServiceDesc is the grpc.ServiceDesc for InformarS2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformarS2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.InformarS2",
	HandlerType: (*InformarS2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformarS2",
			Handler:    _InformarS2_InformarS2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// InformarS3Client is the client API for InformarS3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformarS3Client interface {
	InformarS3(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error)
}

type informarS3Client struct {
	cc grpc.ClientConnInterface
}

func NewInformarS3Client(cc grpc.ClientConnInterface) InformarS3Client {
	return &informarS3Client{cc}
}

func (c *informarS3Client) InformarS3(ctx context.Context, in *Comando, opts ...grpc.CallOption) (*Reloj, error) {
	out := new(Reloj)
	err := c.cc.Invoke(ctx, "/main.InformarS3/InformarS3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformarS3Server is the server API for InformarS3 service.
// All implementations must embed UnimplementedInformarS3Server
// for forward compatibility
type InformarS3Server interface {
	InformarS3(context.Context, *Comando) (*Reloj, error)
	mustEmbedUnimplementedInformarS3Server()
}

// UnimplementedInformarS3Server must be embedded to have forward compatible implementations.
type UnimplementedInformarS3Server struct {
}

func (UnimplementedInformarS3Server) InformarS3(context.Context, *Comando) (*Reloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarS3 not implemented")
}
func (UnimplementedInformarS3Server) mustEmbedUnimplementedInformarS3Server() {}

// UnsafeInformarS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformarS3Server will
// result in compilation errors.
type UnsafeInformarS3Server interface {
	mustEmbedUnimplementedInformarS3Server()
}

func RegisterInformarS3Server(s grpc.ServiceRegistrar, srv InformarS3Server) {
	s.RegisterService(&InformarS3_ServiceDesc, srv)
}

func _InformarS3_InformarS3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comando)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformarS3Server).InformarS3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.InformarS3/InformarS3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformarS3Server).InformarS3(ctx, req.(*Comando))
	}
	return interceptor(ctx, in, info, handler)
}

// InformarS3_ServiceDesc is the grpc.ServiceDesc for InformarS3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformarS3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.InformarS3",
	HandlerType: (*InformarS3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformarS3",
			Handler:    _InformarS3_InformarS3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// EnviarTxtS1Client is the client API for EnviarTxtS1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnviarTxtS1Client interface {
	EnviarTxt(ctx context.Context, in *Archivo, opts ...grpc.CallOption) (*Empty, error)
}

type enviarTxtS1Client struct {
	cc grpc.ClientConnInterface
}

func NewEnviarTxtS1Client(cc grpc.ClientConnInterface) EnviarTxtS1Client {
	return &enviarTxtS1Client{cc}
}

func (c *enviarTxtS1Client) EnviarTxt(ctx context.Context, in *Archivo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.EnviarTxtS1/EnviarTxt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnviarTxtS1Server is the server API for EnviarTxtS1 service.
// All implementations must embed UnimplementedEnviarTxtS1Server
// for forward compatibility
type EnviarTxtS1Server interface {
	EnviarTxt(context.Context, *Archivo) (*Empty, error)
	mustEmbedUnimplementedEnviarTxtS1Server()
}

// UnimplementedEnviarTxtS1Server must be embedded to have forward compatible implementations.
type UnimplementedEnviarTxtS1Server struct {
}

func (UnimplementedEnviarTxtS1Server) EnviarTxt(context.Context, *Archivo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarTxt not implemented")
}
func (UnimplementedEnviarTxtS1Server) mustEmbedUnimplementedEnviarTxtS1Server() {}

// UnsafeEnviarTxtS1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnviarTxtS1Server will
// result in compilation errors.
type UnsafeEnviarTxtS1Server interface {
	mustEmbedUnimplementedEnviarTxtS1Server()
}

func RegisterEnviarTxtS1Server(s grpc.ServiceRegistrar, srv EnviarTxtS1Server) {
	s.RegisterService(&EnviarTxtS1_ServiceDesc, srv)
}

func _EnviarTxtS1_EnviarTxt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Archivo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarTxtS1Server).EnviarTxt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.EnviarTxtS1/EnviarTxt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarTxtS1Server).EnviarTxt(ctx, req.(*Archivo))
	}
	return interceptor(ctx, in, info, handler)
}

// EnviarTxtS1_ServiceDesc is the grpc.ServiceDesc for EnviarTxtS1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnviarTxtS1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.EnviarTxtS1",
	HandlerType: (*EnviarTxtS1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarTxt",
			Handler:    _EnviarTxtS1_EnviarTxt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ConsultarVanguardiaLunaClient is the client API for ConsultarVanguardiaLuna service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultarVanguardiaLunaClient interface {
	ConsultarVanguardiaLuna(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error)
}

type consultarVanguardiaLunaClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultarVanguardiaLunaClient(cc grpc.ClientConnInterface) ConsultarVanguardiaLunaClient {
	return &consultarVanguardiaLunaClient{cc}
}

func (c *consultarVanguardiaLunaClient) ConsultarVanguardiaLuna(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error) {
	out := new(Soldados)
	err := c.cc.Invoke(ctx, "/main.ConsultarVanguardiaLuna/ConsultarVanguardiaLuna", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarVanguardiaLunaServer is the server API for ConsultarVanguardiaLuna service.
// All implementations must embed UnimplementedConsultarVanguardiaLunaServer
// for forward compatibility
type ConsultarVanguardiaLunaServer interface {
	ConsultarVanguardiaLuna(context.Context, *Consulta) (*Soldados, error)
	mustEmbedUnimplementedConsultarVanguardiaLunaServer()
}

// UnimplementedConsultarVanguardiaLunaServer must be embedded to have forward compatible implementations.
type UnimplementedConsultarVanguardiaLunaServer struct {
}

func (UnimplementedConsultarVanguardiaLunaServer) ConsultarVanguardiaLuna(context.Context, *Consulta) (*Soldados, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarVanguardiaLuna not implemented")
}
func (UnimplementedConsultarVanguardiaLunaServer) mustEmbedUnimplementedConsultarVanguardiaLunaServer() {
}

// UnsafeConsultarVanguardiaLunaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultarVanguardiaLunaServer will
// result in compilation errors.
type UnsafeConsultarVanguardiaLunaServer interface {
	mustEmbedUnimplementedConsultarVanguardiaLunaServer()
}

func RegisterConsultarVanguardiaLunaServer(s grpc.ServiceRegistrar, srv ConsultarVanguardiaLunaServer) {
	s.RegisterService(&ConsultarVanguardiaLuna_ServiceDesc, srv)
}

func _ConsultarVanguardiaLuna_ConsultarVanguardiaLuna_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarVanguardiaLunaServer).ConsultarVanguardiaLuna(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ConsultarVanguardiaLuna/ConsultarVanguardiaLuna",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarVanguardiaLunaServer).ConsultarVanguardiaLuna(ctx, req.(*Consulta))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultarVanguardiaLuna_ServiceDesc is the grpc.ServiceDesc for ConsultarVanguardiaLuna service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultarVanguardiaLuna_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConsultarVanguardiaLuna",
	HandlerType: (*ConsultarVanguardiaLunaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarVanguardiaLuna",
			Handler:    _ConsultarVanguardiaLuna_ConsultarVanguardiaLuna_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ConsultarLunaS1Client is the client API for ConsultarLunaS1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultarLunaS1Client interface {
	ConsultarLunaS1(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error)
}

type consultarLunaS1Client struct {
	cc grpc.ClientConnInterface
}

func NewConsultarLunaS1Client(cc grpc.ClientConnInterface) ConsultarLunaS1Client {
	return &consultarLunaS1Client{cc}
}

func (c *consultarLunaS1Client) ConsultarLunaS1(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error) {
	out := new(Soldados)
	err := c.cc.Invoke(ctx, "/main.ConsultarLunaS1/ConsultarLunaS1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarLunaS1Server is the server API for ConsultarLunaS1 service.
// All implementations must embed UnimplementedConsultarLunaS1Server
// for forward compatibility
type ConsultarLunaS1Server interface {
	ConsultarLunaS1(context.Context, *Consulta) (*Soldados, error)
	mustEmbedUnimplementedConsultarLunaS1Server()
}

// UnimplementedConsultarLunaS1Server must be embedded to have forward compatible implementations.
type UnimplementedConsultarLunaS1Server struct {
}

func (UnimplementedConsultarLunaS1Server) ConsultarLunaS1(context.Context, *Consulta) (*Soldados, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarLunaS1 not implemented")
}
func (UnimplementedConsultarLunaS1Server) mustEmbedUnimplementedConsultarLunaS1Server() {}

// UnsafeConsultarLunaS1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultarLunaS1Server will
// result in compilation errors.
type UnsafeConsultarLunaS1Server interface {
	mustEmbedUnimplementedConsultarLunaS1Server()
}

func RegisterConsultarLunaS1Server(s grpc.ServiceRegistrar, srv ConsultarLunaS1Server) {
	s.RegisterService(&ConsultarLunaS1_ServiceDesc, srv)
}

func _ConsultarLunaS1_ConsultarLunaS1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarLunaS1Server).ConsultarLunaS1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ConsultarLunaS1/ConsultarLunaS1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarLunaS1Server).ConsultarLunaS1(ctx, req.(*Consulta))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultarLunaS1_ServiceDesc is the grpc.ServiceDesc for ConsultarLunaS1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultarLunaS1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConsultarLunaS1",
	HandlerType: (*ConsultarLunaS1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarLunaS1",
			Handler:    _ConsultarLunaS1_ConsultarLunaS1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ConsultarLunaS2Client is the client API for ConsultarLunaS2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultarLunaS2Client interface {
	ConsultarLunaS2(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error)
}

type consultarLunaS2Client struct {
	cc grpc.ClientConnInterface
}

func NewConsultarLunaS2Client(cc grpc.ClientConnInterface) ConsultarLunaS2Client {
	return &consultarLunaS2Client{cc}
}

func (c *consultarLunaS2Client) ConsultarLunaS2(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error) {
	out := new(Soldados)
	err := c.cc.Invoke(ctx, "/main.ConsultarLunaS2/ConsultarLunaS2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarLunaS2Server is the server API for ConsultarLunaS2 service.
// All implementations must embed UnimplementedConsultarLunaS2Server
// for forward compatibility
type ConsultarLunaS2Server interface {
	ConsultarLunaS2(context.Context, *Consulta) (*Soldados, error)
	mustEmbedUnimplementedConsultarLunaS2Server()
}

// UnimplementedConsultarLunaS2Server must be embedded to have forward compatible implementations.
type UnimplementedConsultarLunaS2Server struct {
}

func (UnimplementedConsultarLunaS2Server) ConsultarLunaS2(context.Context, *Consulta) (*Soldados, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarLunaS2 not implemented")
}
func (UnimplementedConsultarLunaS2Server) mustEmbedUnimplementedConsultarLunaS2Server() {}

// UnsafeConsultarLunaS2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultarLunaS2Server will
// result in compilation errors.
type UnsafeConsultarLunaS2Server interface {
	mustEmbedUnimplementedConsultarLunaS2Server()
}

func RegisterConsultarLunaS2Server(s grpc.ServiceRegistrar, srv ConsultarLunaS2Server) {
	s.RegisterService(&ConsultarLunaS2_ServiceDesc, srv)
}

func _ConsultarLunaS2_ConsultarLunaS2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarLunaS2Server).ConsultarLunaS2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ConsultarLunaS2/ConsultarLunaS2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarLunaS2Server).ConsultarLunaS2(ctx, req.(*Consulta))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultarLunaS2_ServiceDesc is the grpc.ServiceDesc for ConsultarLunaS2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultarLunaS2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConsultarLunaS2",
	HandlerType: (*ConsultarLunaS2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarLunaS2",
			Handler:    _ConsultarLunaS2_ConsultarLunaS2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ConsultarLunaS3Client is the client API for ConsultarLunaS3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultarLunaS3Client interface {
	ConsultarLunaS3(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error)
}

type consultarLunaS3Client struct {
	cc grpc.ClientConnInterface
}

func NewConsultarLunaS3Client(cc grpc.ClientConnInterface) ConsultarLunaS3Client {
	return &consultarLunaS3Client{cc}
}

func (c *consultarLunaS3Client) ConsultarLunaS3(ctx context.Context, in *Consulta, opts ...grpc.CallOption) (*Soldados, error) {
	out := new(Soldados)
	err := c.cc.Invoke(ctx, "/main.ConsultarLunaS3/ConsultarLunaS3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarLunaS3Server is the server API for ConsultarLunaS3 service.
// All implementations must embed UnimplementedConsultarLunaS3Server
// for forward compatibility
type ConsultarLunaS3Server interface {
	ConsultarLunaS3(context.Context, *Consulta) (*Soldados, error)
	mustEmbedUnimplementedConsultarLunaS3Server()
}

// UnimplementedConsultarLunaS3Server must be embedded to have forward compatible implementations.
type UnimplementedConsultarLunaS3Server struct {
}

func (UnimplementedConsultarLunaS3Server) ConsultarLunaS3(context.Context, *Consulta) (*Soldados, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarLunaS3 not implemented")
}
func (UnimplementedConsultarLunaS3Server) mustEmbedUnimplementedConsultarLunaS3Server() {}

// UnsafeConsultarLunaS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultarLunaS3Server will
// result in compilation errors.
type UnsafeConsultarLunaS3Server interface {
	mustEmbedUnimplementedConsultarLunaS3Server()
}

func RegisterConsultarLunaS3Server(s grpc.ServiceRegistrar, srv ConsultarLunaS3Server) {
	s.RegisterService(&ConsultarLunaS3_ServiceDesc, srv)
}

func _ConsultarLunaS3_ConsultarLunaS3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consulta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarLunaS3Server).ConsultarLunaS3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ConsultarLunaS3/ConsultarLunaS3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarLunaS3Server).ConsultarLunaS3(ctx, req.(*Consulta))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultarLunaS3_ServiceDesc is the grpc.ServiceDesc for ConsultarLunaS3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultarLunaS3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConsultarLunaS3",
	HandlerType: (*ConsultarLunaS3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarLunaS3",
			Handler:    _ConsultarLunaS3_ConsultarLunaS3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// ConsultarLunaVanguardiaClient is the client API for ConsultarLunaVanguardia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsultarLunaVanguardiaClient interface {
	ConsultarLunaVanguardia(ctx context.Context, in *Soldados, opts ...grpc.CallOption) (*Empty, error)
}

type consultarLunaVanguardiaClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultarLunaVanguardiaClient(cc grpc.ClientConnInterface) ConsultarLunaVanguardiaClient {
	return &consultarLunaVanguardiaClient{cc}
}

func (c *consultarLunaVanguardiaClient) ConsultarLunaVanguardia(ctx context.Context, in *Soldados, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.ConsultarLunaVanguardia/ConsultarLunaVanguardia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarLunaVanguardiaServer is the server API for ConsultarLunaVanguardia service.
// All implementations must embed UnimplementedConsultarLunaVanguardiaServer
// for forward compatibility
type ConsultarLunaVanguardiaServer interface {
	ConsultarLunaVanguardia(context.Context, *Soldados) (*Empty, error)
	mustEmbedUnimplementedConsultarLunaVanguardiaServer()
}

// UnimplementedConsultarLunaVanguardiaServer must be embedded to have forward compatible implementations.
type UnimplementedConsultarLunaVanguardiaServer struct {
}

func (UnimplementedConsultarLunaVanguardiaServer) ConsultarLunaVanguardia(context.Context, *Soldados) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarLunaVanguardia not implemented")
}
func (UnimplementedConsultarLunaVanguardiaServer) mustEmbedUnimplementedConsultarLunaVanguardiaServer() {
}

// UnsafeConsultarLunaVanguardiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultarLunaVanguardiaServer will
// result in compilation errors.
type UnsafeConsultarLunaVanguardiaServer interface {
	mustEmbedUnimplementedConsultarLunaVanguardiaServer()
}

func RegisterConsultarLunaVanguardiaServer(s grpc.ServiceRegistrar, srv ConsultarLunaVanguardiaServer) {
	s.RegisterService(&ConsultarLunaVanguardia_ServiceDesc, srv)
}

func _ConsultarLunaVanguardia_ConsultarLunaVanguardia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Soldados)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarLunaVanguardiaServer).ConsultarLunaVanguardia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.ConsultarLunaVanguardia/ConsultarLunaVanguardia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarLunaVanguardiaServer).ConsultarLunaVanguardia(ctx, req.(*Soldados))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsultarLunaVanguardia_ServiceDesc is the grpc.ServiceDesc for ConsultarLunaVanguardia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsultarLunaVanguardia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ConsultarLunaVanguardia",
	HandlerType: (*ConsultarLunaVanguardiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsultarLunaVanguardia",
			Handler:    _ConsultarLunaVanguardia_ConsultarLunaVanguardia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
